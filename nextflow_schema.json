{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/qcif/taxodactyl/master/nextflow_schema.json",
    "title": "qcif/taxodactyl pipeline parameters",
    "description": "TAXODACTYL - High-confidence, evidence-based taxonomic assignment of DNA sequences",
    "type": "object",
    "$defs": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["metadata", "sequences", "outdir", "db_type", "taxdb", "analyst_name", "facility_name", "ncbi_api_key", "ncbi_user_email"],
            "properties": {
                "analyst_name": {
                    "type": "string",
                    "description": "Name of the analyst running the workflow.",
                    "errorMessage": "Parameter 'analyst_name' must be a string."
                },
                "db_type": {
                    "type": "string",
                    "default": "blast_core_nt",
                    "enum": ["blast_core_nt", "bold"],
                    "description": "Type of reference database to use for taxonomic assignment.",
                    "errorMessage": "Parameter 'db_type' must be one of [blast_core_nt, bold]. Default: 'blast_core_nt'."
                },
                "facility_name": {
                    "type": "string",
                    "description": "Name of the facility where the workflow is executed.",
                    "errorMessage": "Parameter 'facility_name' must be a string."
                },
                "metadata": {
                    "type": "string",
                    "default": "metadata.csv",
                    "pattern": "^\\S+\\.csv$",
                    "format": "file-path",
                    "exists": "true",
                    "mimeType": "text/csv",
                    "schema": "assets/schema_input.json",
                    "description": "CSV file containing sample metadata.",
                    "errorMessage": "Parameter 'metadata' must be a valid file path, be in CSV format with columns: 'sample_id', 'locus', 'preliminary_id', file name cannot contain spaces and must have a .csv extension. Default: 'metadata.csv'."
                },
                "outdir": {
                    "type": "string",
                    "default": "output",
                    "format": "directory-path",
                    "description": "Directory where output files will be saved.",
                    "errorMessage": "Parameter 'outdir' must be a valid directory path. Default: 'output'."
                },
                "sequences": {
                    "type": "string",
                    "default": "sequences.fasta",
                    "pattern": "^\\S+\\.fn?a(sta)?$",
                    "format": "file-path",
                    "exists": "true",
                    "mimeType": "text/plain",
                    "description": "FASTA file containing input sequences for analysis.",
                    "errorMessage": "Parameter 'sequences' must be a valid file path, be in plain text format, file name cannot contain spaces and must have .fa, .fna, or .fasta extension. Default: 'sequences.fasta'."
                },
                "taxdb": {
                    "type": "string",
                    "format": "directory-path",
                    "exists": true,
                    "description": "The directory where NCBI's taxdump files can be found.",
                    "errorMessage": "Parameter 'taxdb' must be a valid directory path."
                },
                "blastdb": {
                    "type": "string",
                    "format": "file-path",
                    "pattern": ".*core_nt",
                    "description": "Path to the BLAST database files.",
                    "errorMessage": "Parameter 'blastdb' must be a valid path to BLAST database files, and needs to end with 'core_nt', e.g. '/folder_path/blast_db/202505/core_nt'. The folder should contain files with the core_nt prefix and extensions: .nal, .ndb, .njs, .nos, .not, .ntf, .nto. In addition, it should contain multiple volumes of core_nt, named core_nt.NUM with extensions .nhr, .nin, .nnd, .nni, .nog and .nsq."
                },
                "bold_skip_orientation": {
                    "type": "integer",
                    "default": 0,
                    "enum": [0, 1],
                    "description": "If SKIP_ORIENTATION=1 then BOLD runs will skip orientation of query sequences and submit both forward and reverse sequences to the ID Engine API (for developers, this removes the need for local installation of Hmmsearch).",
                    "hidden": true,
                    "errorMessage": "Parameter 'bold_skip_orientation' must be one of [0, 1]. Default: 0."
                },
                "bold_database_name": {
                    "type": "string",
                    "default": "COX1_SPECIES_PUBLIC",
                    "description": "Name of the BOLD database to use for taxonomic assignment.",
                    "errorMessage": "Parameter 'bold_database_name' must be a string."
                },
                "max_candidates_for_analysis": {
                    "type": "integer",
                    "default": 3,
                    "minimum": 1,
                    "description": "The maximum number of candidate species that will proceed to further analysis.",
                    "hidden": true,
                    "errorMessage": "Parameter 'max_candidates_for_analysis' must be an integer >= 1. Default: 3."
                },
                "median_identity_warning_factor": {
                    "type": "number",
                    "default": 0.95,
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Minimum proportion of candidate identity threshold for a median identity to receive WARNING level instead of DANGER level. e.g. if the median identity is >95% of the candidate identity threshold, then it will be marked as WARNING instead of DANGER.",
                    "hidden": true,
                    "errorMessage": "Parameter 'median_identity_warning_factor' must be a number between 0 and 1. Default: 0.95."
                },
                "min_identity": {
                    "type": "number",
                    "default": 0.935,
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Minimum identity for a BLAST hit to be considered for candidate screening.",
                    "errorMessage": "Parameter 'min_identity' must be a number between 0 and 1. Default: 0.935."
                },
                "min_identity_strict": {
                    "type": "number",
                    "default": 0.985,
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Minimum hit identity to be considered a STRONG candidate.",
                    "errorMessage": "Parameter 'min_identity_strict' must be a number between 0 and 1. Default: 0.985."
                },
                "min_nt": {
                    "type": "integer",
                    "default": 300,
                    "minimum": 0,
                    "description": "Minimum alignment length for a BLAST hit to be considered for candidate screening.",
                    "errorMessage": "Parameter 'min_nt' must be an integer >= 0. Default: 300."
                },
                "min_q_coverage": {
                    "type": "number",
                    "default": 0.85,
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Minimum query coverage for a BLAST hit to be considered for candidate screening.",
                    "errorMessage": "Parameter 'min_q_coverage' must be a number between 0 and 1. Default: 0.85."
                },
                "phylogeny_min_hit_identity": {
                    "type": "number",
                    "default": 0.95,
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Minimum hit identity to be included into phylogenetic tree.",
                    "errorMessage": "Parameter 'phylogeny_min_hit_identity' must be a number between 0 and 1. Default: 0.95."
                },
                "phylogeny_min_hit_sequences": {
                    "type": "integer",
                    "default": 10,
                    "minimum": 1,
                    "description": "The minimum number of sequences to be included (non-candidate sequences will be included until this limit is reached).",
                    "errorMessage": "Parameter 'phylogeny_min_hit_sequences' must be an integer >= 1. Default: 10."
                },
                "phylogeny_max_hits_per_species": {
                    "type": "integer",
                    "default": 30,
                    "minimum": 1,
                    "description": "The maximum number of hits per species to be included into phylogenetic tree.",
                    "errorMessage": "Parameter 'phylogeny_max_hits_per_species' must be an integer >= 1. Default: 30."
                },
                "allowed_loci_file": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "pattern": "^\\S+\\.json$",
                    "description": "A JSON file which describes permitted loci (barcoding regions) and their synonyms. The default can be overridden with a file in the same format. The ambiguous_synonyms listed in this file are locus synonyms which may be ambiguous in a GenBank query.",
                    "errorMessage": "Parameter 'allowed_loci_file' must be a valid file path and file name cannot contain spaces and must have a .json extension."
                },
                "db_cov_country_missing_a": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 0,
                    "description": "Flag 5.3B is raised when at least this many species in country of origin have no GenBank records.",
                    "hidden": true,
                    "errorMessage": "Parameter 'db_cov_country_missing_a' must be an integer >= 0. Default: 1."
                },
                "db_cov_min_a": {
                    "type": "integer",
                    "default": 5,
                    "minimum": 1,
                    "description": "Minimum number of GenBank records to receive Flag 5.1A.",
                    "hidden": true,
                    "errorMessage": "Parameter 'db_cov_min_a' must be an integer >= 1. Default: 5."
                },
                "db_cov_min_b": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1,
                    "description": "Minimum number of GenBank records to receive Flag 5.1B.",
                    "hidden": true,
                    "errorMessage": "Parameter 'db_cov_min_b' must be an integer >= 1. Default: 1."
                },
                "db_cov_related_min_a": {
                    "type": "integer",
                    "default": 90,
                    "minimum": 1,
                    "maximum": 100,
                    "description": "Minimum percent species coverage of GenBank records to receive Flag 5.2A.",
                    "hidden": true,
                    "errorMessage": "Parameter 'db_cov_related_min_a' must be an integer between 1 and 100. Default: 90."
                },
                "db_cov_related_min_b": {
                    "type": "integer",
                    "default": 10,
                    "minimum": 1,
                    "maximum": 100,
                    "description": "Minimum percent species coverage of GenBank records to receive Flag 5.2B.",
                    "hidden": true,
                    "errorMessage": "Parameter 'db_cov_related_min_b' must be an integer between 1 and 100. Default: 10."
                },
                "db_coverage_toi_limit": {
                    "type": "integer",
                    "default": 10,
                    "minimum": 0,
                    "description": "The maximum number of taxa of interest that will be analysed by database coverage.",
                    "hidden": true,
                    "errorMessage": "Parameter 'db_coverage_toi_limit' must be an integer >= 0. Default: 10."
                },
                "gbif_accepted_status": {
                    "type": "string",
                    "default": "accepted,doubtful",
                    "hidden": true,
                    "pattern": "^(\\S+,)*\\S+$",
                    "description": "Comma-separated list of GBIF taxonomic statuses to be considered.",
                    "errorMessage": "Parameter 'gbif_accepted_status' must be a comma-separated list with no spaces. Default: 'accepted,doubtful'."
                },
                "gbif_limit_records": {
                    "type": "integer",
                    "default": 500,
                    "minimum": 1,
                    "hidden": true,
                    "description": "The maximum number of records per-request to the GBIF API. More records than this will be fetched in batches.",
                    "errorMessage": "Parameter 'gbif_limit_records' must be an integer >= 1. Default: 500."
                },
                "gbif_max_occurrence_records": {
                    "type": "integer",
                    "default": 5000,
                    "minimum": 1,
                    "description": "The maximum number of GBIF records that will be fetched for plotting the occurrence distribution map.",
                    "hidden": true,
                    "errorMessage": "Parameter 'gbif_max_occurrence_records' must be an integer >= 1. Default: 5000."
                },
                "ncbi_api_key": {
                    "type": "string",
                    "pattern": "^\\S+$",
                    "description": "Used to authenticate with NCBI Entrez API for an increased rate limit on requests.",
                    "errorMessage": "Parameter 'ncbi_api_key' must not contain spaces."
                },
                "ncbi_user_email": {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "description": "Used to authenticate with NCBI Entrez API if NCBI_API_KEY not provided. Also used to rate limit requests from different users on the same system.",
                    "errorMessage": "Parameter 'ncbi_user_email' must be a valid email address."
                },
                "min_source_count": {
                    "type": "integer",
                    "default": 5,
                    "minimum": 1,
                    "description": "Minimum number of independent publications required for a candidate species to receive Flag 4A.",
                    "hidden": true,
                    "errorMessage": "Parameter 'min_source_count' must be an integer >= 1. Default: 5."
                },
                "blast_database_name_for_report": {
                    "type": "string",
                    "default": "NCBI Core Nt'",
                    "description": "For showing in the report.",
                    "hidden": true,
                    "errorMessage": "Parameter 'blast_database_name_for_report' must be a string. Default: NCBI Core Nt'."
                },
                "blast_max_target_seqs_for_report": {
                    "type": "integer",
                    "default": 2000,
                    "minimum": 1,
                    "description": "The maximum number of hits collected for each query sequence in the BLAST search. Not used for analysis but rendered in the report.",
                    "hidden": true,
                    "errorMessage": "Parameter 'blast_max_target_seqs_for_report' must be an integer >= 1. Default: 2000."
                },
                "report_debug": {
                    "type": "integer",
                    "default": 0,
                    "enum": [0, 1],
                    "description": "If REPORT_DEBUG=1 this replaces the timestamp in the report file name with DEBUG so that it can be easily reloaded in the browser after re-rendering.",
                    "hidden": true,
                    "errorMessage": "Parameter 'report_debug' must be one of [0, 1]. Default: 0."
                },
                "email": {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "description": "Email address for notifications and reports.",
                    "errorMessage": "Parameter 'email' must be a valid email address."
                },
                "logging_debug": {
                    "type": "integer",
                    "default": 0,
                    "enum": [0, 1],
                    "description": "If LOGGING_DEBUG=1 then verbose log statements will be emitted to help diagnose issues.",
                    "hidden": true,
                    "errorMessage": "Parameter 'logging_debug' must be one of [0, 1]. Default: 0."
                },
                "accessions_filename": {
                    "type": "string",
                    "default": "accessions.txt",
                    "hidden": true,
                    "pattern": "^\\S+\\.txt$",
                    "description": "Filename for the file containing BLAST accession numbers.",
                    "errorMessage": "Parameter 'accessions_filename' file name cannot contain spaces and must have a .txt extension. Default: 'accessions.txt'."
                },
                "blast_xml_filename": {
                    "type": "string",
                    "default": "blast_results.xml",
                    "hidden": true,
                    "pattern": "^\\S+\\.xml$",
                    "description": "Filename for the BLAST XML results file.",
                    "errorMessage": "Parameter 'blast_xml_filename' file name cannot contain spaces and must have a .xml extension. Default: 'blast_results.xml'."
                },
                "hits_fasta_filename": {
                    "type": "string",
                    "default": "all_hits.fasta",
                    "hidden": true,
                    "pattern": "^\\S+\\.fn?a(sta)?$",
                    "description": "Filename for the FASTA file containing all BLAST hits.",
                    "errorMessage": "Parameter 'hits_fasta_filename' file name cannot contain spaces and must have .fa, .fna, or .fasta extension. Default: 'all_hits.fasta'."
                },
                "hits_json_filename": {
                    "type": "string",
                    "default": "all_hits.json",
                    "hidden": true,
                    "pattern": "^\\S+\\.json$",
                    "description": "Filename for the JSON file containing all BLAST hits.",
                    "errorMessage": "Parameter 'hits_json_filename' file name cannot contain spaces and must have a .json extension. Default: 'all_hits.json'."
                },
                "boxplot_img_filename": {
                    "type": "string",
                    "default": "candidates_identity_boxplot.png",
                    "hidden": true,
                    "pattern": "^\\S+\\.png$",
                    "description": "Filename for the PNG image of candidate identity boxplot.",
                    "errorMessage": "Parameter 'boxplot_img_filename' file name cannot contain spaces and must have a .png extension. Default: 'candidates_identity_boxplot.png'."
                },
                "candidates_csv_filename": {
                    "type": "string",
                    "default": "candidates.csv",
                    "hidden": true,
                    "pattern": "^\\S+\\.csv$",
                    "description": "Filename for the CSV file listing candidate hits.",
                    "errorMessage": "Parameter 'candidates_csv_filename' file name cannot contain spaces and must have a .csv extension. Default: 'candidates.csv'."
                },
                "candidates_fasta_filename": {
                    "type": "string",
                    "default": "candidates.fasta",
                    "hidden": true,
                    "pattern": "^\\S+\\.fn?a(sta)?$",
                    "description": "Filename for the FASTA file of candidate sequences.",
                    "errorMessage": "Parameter 'candidates_fasta_filename' file name cannot contain spaces and must have .fa, .fna, or .fasta extension. Default: 'candidates.fasta'."
                },
                "candidates_phylogeny_fasta_filename": {
                    "type": "string",
                    "default": "candidates_phylogeny.fasta",
                    "hidden": true,
                    "pattern": "^\\S+\\.fn?a(sta)?$",
                    "description": "Filename for the FASTA file of candidate sequences that will be used to generate the phylogenetic tree.",
                    "errorMessage": "Parameter 'candidates_phylogeny_fasta_filename' file name cannot contain spaces and must have .fa, .fna, or .fasta extension. Default: 'candidates.fasta'."
                },
                "candidates_json_filename": {
                    "type": "string",
                    "default": "candidates.json",
                    "hidden": true,
                    "pattern": "^\\S+\\.json$",
                    "description": "Filename for the JSON file of candidate hits.",
                    "errorMessage": "Parameter 'candidates_json_filename' file name cannot contain spaces and must have a .json extension. Default: 'candidates.json'."
                },
                "candidates_sources_json_filename": {
                    "type": "string",
                    "default": "candidates_sources.json",
                    "hidden": true,
                    "pattern": "^\\S+\\.json$",
                    "description": "Filename for the JSON file listing sources of candidate species.",
                    "errorMessage": "Parameter 'candidates_sources_json_filename' file name cannot contain spaces and must have a .json extension. Default: 'candidates_sources.json'."
                },
                "independent_sources_json_filename": {
                    "type": "string",
                    "default": "aggregated_sources.json",
                    "hidden": true,
                    "pattern": "^\\S+\\.json$",
                    "description": "Filename for the JSON file listing aggregated publications supporting taxonomic associations.",
                    "errorMessage": "Parameter 'independent_sources_json_filename' file name cannot contain spaces and must have a .json extension. Default: 'independent_sources.json'."
                },
                "bold_taxonomy_json": {
                    "type": "string",
                    "default": "bold_taxonomy.json",
                    "hidden": true,
                    "pattern": "^\\S+\\.json$",
                    "description": "Filename for the JSON file containing BOLD taxonomy data.",
                    "errorMessage": "Parameter 'bold_taxonomy_json' file name cannot contain spaces and must have a .json extension. Default: 'bold_taxonomy.json'."
                },
                "taxonomy_filename": {
                    "type": "string",
                    "default": "taxonomy.csv",
                    "hidden": true,
                    "pattern": "^\\S+\\.csv$",
                    "description": "Filename for the CSV file containing BLAST taxonomy assignments.",
                    "errorMessage": "Parameter 'taxonomy_filename' file name cannot contain spaces and must have a .csv extension. Default: 'taxonomy.csv'."
                },
                "candidates_msa_filename": {
                    "type": "string",
                    "default": "candidates_phylogeny.msa",
                    "hidden": true,
                    "pattern": "^\\S+\\.msa$",
                    "description": "Filename for the multiple sequence alignment file of candidate sequences.",
                    "errorMessage": "Parameter 'candidates_msa_filename' file name cannot contain spaces and must have a .msa extension. Default: 'candidates_phylogeny.msa'."
                },
                "tree_nwk_filename": {
                    "type": "string",
                    "default": "candidates_phylogeny.nwk",
                    "hidden": true,
                    "pattern": "^\\S+\\.nwk$",
                    "description": "Filename for the Newick tree file of candidate sequences.",
                    "errorMessage": "Parameter 'tree_nwk_filename' file name cannot contain spaces and must have a .nwk extension. Default: 'candidates_phylogeny.nwk'."
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "pipelines_testdata_base_path": {
                    "type": "string",
                    "fa_icon": "far fa-check-circle",
                    "description": "Base URL or local path to location of pipeline test dataset files",
                    "default": "https://raw.githubusercontent.com/nf-core/test-datasets/",
                    "hidden": true
                },
                "trace_report_suffix": {
                    "type": "string",
                    "fa_icon": "far calendar",
                    "description": "Suffix to add to the trace report filename. Default is the date and time in the format yyyy-MM-dd_HH-mm-ss.",
                    "hidden": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/$defs/input_output_options"
        },
        {
            "$ref": "#/$defs/institutional_config_options"
        },
        {
            "$ref": "#/$defs/generic_options"
        }
    ]
}
